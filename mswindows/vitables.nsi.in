#       Copyright (C) 2005-2007 Carabos Coop. V. All rights reserved
#       Copyright (C) 2008-2024 Vicent Mas. All rights reserved
#       Author:  Vicent Mas - vmas@vitables.org
#
# This script is intended to generate a binary installer for sources
# imported from a ViTables repository. It is not intended for distribution.

# INCLUDES
!include MUI2.nsh
!include Library.nsh
!include Sections.nsh
!include LogicLib.nsh
!include fileassoc.nsh
!include UAC.nsh

# INIT
# Admin privileges are needed for writing in HKLM and HKCR root keys
# of the registry and also for installing into system folders (Program Files).
# But the UAC plugin requires user privileges
RequestExecutionLevel user
SetCompressor /SOLID lzma
Name "ViTables @VERSION@"
OutFile "ViTables-@VERSION@.win32-py@DOTPYTHONVERSION@.exe"
XPStyle on

# CONSTANTS
!define APPNAME "ViTables"
!define APPFOLDER "ViTables @VERSION@ for Python@DOTPYTHONVERSION@"
!define S_DEFINSTDIR_USER "$LocalAppData\${APPNAME}"
!define S_DEFINSTDIR_ADMIN "$ProgramFiles\${APPNAME}"
!define INICIOFOLDER "$SMPROGRAMS\${APPFOLDER}"
!define INICIOFOLDER_RUN "${INICIOFOLDER}\ViTables.lnk"
!define INICIOFOLDER_UNINSTALLER "${INICIOFOLDER}\Uninstall.lnk"
!define INICIOFOLDER_EXAMPLES "${INICIOFOLDER}\Examples.lnk"
!define INICIOFOLDER_GUIDE "${INICIOFOLDER}\User's Guide (PDF).lnk"
!define DESKTOPFOLDER_RUN "$DESKTOP\ViTables.lnk"
# The installer icons as used by MUI (see NSIS FAQ)
!define MUI_ICON "@ROOT@\vitables\icons\vtinstaller.ico"
!define MUI_UNICON "@ROOT@\vitables\icons\vtinstaller.ico"


# Variables declaration
Var VITABLES_KEY
Var PYTHONDIR

###########################################################
#	PART I: INSTALLER
###########################################################

# --------------------------------
# FUNCTIONS
# --------------------------------
Function .onInit
  # The registry key where application settings will be stored
  StrCpy $VITABLES_KEY "SOFTWARE\ViTables\@VERSION@"

  # Check the python installation
  ExecWait "pythonw -c $\"import sys; (sys.version_info[0:3] > (2, 6)) or 0/0$\"" $R0
  ${If} $R0 == "1"
    MessageBox MB_OK|MB_ICONEXCLAMATION "It seems that Python 2.6 is not \
    installed. Aborting the ViTables installation process."
    Abort
  ${EndIf}

  # Check the tables installation
  ExecWait "pythonw -c $\"import tables$\""
  IfErrors 0 +3
    MessageBox MB_OK|MB_ICONEXCLAMATION "It seems that PyTables is not \
    installed. Aborting the ViTables installation process."
    Abort

  # Check the PyQt4.QtGui installation
  ExecWait "pythonw -c $\"from PyQt4.QtGui import *$\""
  IfErrors 0 +3
    MessageBox MB_OK|MB_ICONEXCLAMATION "It seems that PyQt4.QtGui is not \
    installed. Aborting the ViTables installation process."
    Abort

  # Check the PyQt4.QtCore installation
  ExecWait "pythonw -c $\"from PyQt4.QtCore import *$\""
  IfErrors 0 +3
    MessageBox MB_OK|MB_ICONEXCLAMATION "It seems that PyQt4.QtCore is not \
    installed. Aborting the ViTables installation process."
    Abort
FunctionEnd

Function preInstallDir
  # The installation directory depends on the user privileges
  # admin user returns 1, regular user returns 0. The result is stored in $0
  !insertmacro UAC_IsAdmin
${If} $0 <> 1 ; We are not executing as admin
    StrCpy $INSTDIR "${S_DEFINSTDIR_USER}\${APPFOLDER}"
${Else}
    StrCpy $INSTDIR "${S_DEFINSTDIR_ADMIN}\${APPFOLDER}"
${EndIf}
FunctionEnd

Function prePythonDir
  # The registry key where python install path is stored
  ReadRegStr $PYTHONDIR HKLM "SOFTWARE\Python\PythonCore\@DOTPYTHONVERSION@\InstallPath" ""
  ClearErrors

FunctionEnd

Function postPythonDir
  IfFileExists $PYTHONDIR\pythonw.exe +3 0
  MessageBox MB_YESNO "Cannot find a valid Python@DOTPYTHONVERSION@ interpreter in \
$PYTHONDIR.$\r$\nYou can install ViTables there, but it will not run \
without Python@DOTPYTHONVERSION@ installed in the same directory tree.$\r$\nContinue \
anyway?" IDYES +2 IDNO 0
  Abort
FunctionEnd

# --------------------------------
# PAGES
# --------------------------------

# Page: Welcome
!insertmacro MUI_PAGE_WELCOME

# Page: License
!insertmacro MUI_PAGE_LICENSE @ROOT@\@LICENSEFILENAME@

# Page: Components selection
#!insertmacro MUI_PAGE_COMPONENTS

# Page: Installation directory for ViTables data files
!define MUI_PAGE_CUSTOMFUNCTION_PRE preInstallDir
!define MUI_DIRECTORYPAGE_TEXT_TOP "Setup will install ViTables @VERSION@ data \
files in the following folder. To install in a different folder, click \
Browse and select another folder. Click Next to Continue."
!insertmacro MUI_PAGE_DIRECTORY

# Page: Installation directory for ViTables modules and scripts
!define MUI_PAGE_CUSTOMFUNCTION_PRE prePythonDir
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE postPythonDir
!define MUI_PAGE_HEADER_TEXT "Choose the Python-@DOTPYTHONVERSION@ interpreter"
!define MUI_PAGE_HEADER_SUBTEXT "Choose the folder in which the Python-@DOTPYTHONVERSION@ \
interpreter is located."
!define MUI_DIRECTORYPAGE_TEXT_TOP "Setup will install ViTables @VERSION@ modules and \
scripts under the following folder. To install in a different folder, click \
Browse and select another folder. Click Next to Continue."
!define MUI_DIRECTORYPAGE_VARIABLE $PYTHONDIR
!insertmacro MUI_PAGE_DIRECTORY

# Page: Install selected components
!insertmacro MUI_PAGE_INSTFILES

# ------------------------------------------
# CALLBACKS
# ------------------------------------------
Function CreateShortcuts
  # If we install as admin make sure that Start menu folders will be created
  # for regular users too, not only for the admin user
  !insertmacro UAC_IsAdmin
  ${If} $0 <> 1 ; We are not executing as admin
    SetShellVarContext current
  ${Else}
    SetShellVarContext all
  ${EndIf}

  # Create shortcuts
  CreateDirectory "${INICIOFOLDER}"
  CreateShortCut "${INICIOFOLDER_RUN}" "$PYTHONDIR\Scripts\vitables.exe"
  CreateShortCut "${INICIOFOLDER_UNINSTALLER}" "$INSTDIR\Uninstall.exe"
  CreateShortCut "${INICIOFOLDER_EXAMPLES}" "$INSTDIR\examples"
  CreateShortCut "${INICIOFOLDER_GUIDE}" "$INSTDIR\doc\UsersGuide.pdf"
  CreateShortCut "${DESKTOPFOLDER_RUN}" "$PYTHONDIR\Scripts\vitables.exe"
FunctionEnd

Function SaveToRegistry
  !insertmacro UAC_IsAdmin
  ${If} $0 <> 1 ; We are not executing as admin
    # Update the registry
    WriteRegStr HKCU $VITABLES_KEY "INSTDIR" $INSTDIR
    WriteRegStr HKCU $VITABLES_KEY "PYTHONDIR" $PYTHONDIR
  ${Else}
    # Update the registry and associate the .h5 extension to ViTables
    WriteRegStr HKLM $VITABLES_KEY "INSTDIR" $INSTDIR
    WriteRegStr HKLM $VITABLES_KEY "PYTHONDIR" $PYTHONDIR
    !insertmacro APP_ASSOCIATE "h5" "ViTables.HDF5file" "ViTables document" \
    "$PYTHONDIR\Lib\site-packages\vitables\icons\vitables_file.ico" \
    "Open with ViTables" "$PYTHONDIR\Scripts\vitables.exe $\"%1$\""
  ${EndIf}
FunctionEnd

# ------------------------------------------
# SECTIONS (STUFF TO BE INSTALLED)
# ------------------------------------------

Section "ViTables @VERSION@" VT

  # Copy the ViTables script in the Python Scripts directory
  SetOutPath $PYTHONDIR\Scripts
  File vitables.exe
  File vitables.exe.manifest

  # Copy the ViTables sources in the Python site-packages directory
  SetOutPath $PYTHONDIR\Lib\site-packages\vitables
  File /r /x images /x plotter /x .leo_shadow @ROOT@\vitables\*.py
  File /r /x images /x plotter @ROOT@\vitables\*.ui
  File /r /x images /x plotter @ROOT@\vitables\*.ini
  SetOutPath $PYTHONDIR\Lib\site-packages\vitables\plugins\csv\icons
  File /r @ROOT@\vitables\plugins\csv\icons\*
  SetOutPath $PYTHONDIR\Lib\site-packages\vitables\icons
  File /r @ROOT@\vitables\icons\*
  SetOutPath $PYTHONDIR\Lib\site-packages\vitables\htmldocs
  File /r @ROOT@\vitables\htmldocs\*

  # Populate the installation directory with:
  # -text files (TODO.txt, LICENSE.html...)
  # - users guide (sources and PDF)
  # - examples directory
  # - uninstaller

  SetOutPath $INSTDIR
  File @ROOT@\*.txt
  File ..\vitables\LICENSE.html

  SetOutPath $INSTDIR\doc
  File @ROOT@\doc\UsersGuide.pdf
  File @ROOT@\doc\usersguide-*.rst
  File @ROOT@\doc\index_*.txt
  File @ROOT@\doc\make.bat
  File @ROOT@\doc\conf.py
  SetOutPath $INSTDIR\doc\images
  File /r @ROOT@\doc\images\*

  SetOutPath $INSTDIR\examples
  File /r @ROOT@\examples\*.*

  WriteUninstaller "$INSTDIR\Uninstall.exe"

  # To ensure that everybody can accesses the examples folder in read/write
  # mode on Windows Vista even if  we install as admin
  !insertmacro UAC_IsAdmin
  ${If} $0 = 1 ; We are executing as admin
    AccessControl::GrantOnFile "$INSTDIR\examples" "(BU)" "GenericRead|GenericWrite"
  ${EndIf}

  # Create shortcuts in the Start Menu and in the desktop
  Call CreateShortcuts

  # Update the registry
  Call SaveToRegistry
SectionEnd

###########################################################
#	PART II: UNINSTALLER
###########################################################

# --------------------------------
# FUNCTIONS
# --------------------------------

Function un.onInit
  # Variables set in installer functions are not available here so we must set
  # them again
  StrCpy $VITABLES_KEY "SOFTWARE\ViTables\@VERSION@"
FunctionEnd

# --------------------------------
# PAGES
# --------------------------------

# Page: Welcome
!insertmacro MUI_UNPAGE_CONFIRM

# Uninstall page: execute uninstall sections
!define MUI_INSTFILESPAGE_FINISHHEADER_TEXT "Uninstallation complete"
!define MUI_INSTFILESPAGE_FINISHHEADER_SUBTEXT "ViTables deletion completed \
succesfully."
!define MUI_UNFINSIHPAGE_NOAUTOCLOSE 1
!insertmacro MUI_UNPAGE_INSTFILES

# ------------------------------------------
# CALLBACKS
# ------------------------------------------
Function un.RetrieveFromRegistry
  !insertmacro UAC_IsAdmin
  ${If} $0 <> 1 ; We are not executing as admin
    # Update the registry
    ReadRegStr $PYTHONDIR HKCU $VITABLES_KEY "PYTHONDIR"
    ReadRegStr $INSTDIR HKCU $VITABLES_KEY "INSTDIR"
  ${Else}
    # Update the registry
    ReadRegStr $PYTHONDIR HKLM $VITABLES_KEY "PYTHONDIR"
    ReadRegStr $INSTDIR HKLM $VITABLES_KEY "INSTDIR"
  ${EndIf}
FunctionEnd

Function un.RemoveShortcuts
  # Make sure that Start menu folders will be removed for regular users too
  !insertmacro UAC_IsAdmin
  ${If} $0 <> 1 ; We are not executing as admin
    SetShellVarContext current
  ${Else}
    SetShellVarContext all
  ${EndIf}
  # Remove the application entry in the Start Menu
  RMDir /r "${INICIOFOLDER}"
  Delete "${DESKTOPFOLDER_RUN}"
FunctionEnd

Function un.CleanRegistry
  # Delete the ViTables key from the registry, unassociate the .h5
  # extension from ViTables and restore the previous association
  !insertmacro UAC_IsAdmin
  ${If} $0 <> 1 ; We are not executing as admin
    DeleteRegKey HKCU $VITABLES_KEY
  ${Else}
    DeleteRegKey HKLM $VITABLES_KEY
    DeleteRegKey HKCU $VITABLES_KEY
    !insertmacro APP_UNASSOCIATE "h5" "ViTables.HDF5file"
  ${EndIf}
FunctionEnd

# ----------------------------------
# SECTIONS (STUFF TO BE UNINSTALLED)
# ----------------------------------

Section "Un.Vitables uninstall" UVT
  # Read the INSTDIR and PYTHONDIR values from the registry
  Call un.RetrieveFromRegistry

  # Remove the application directory and the vitables package
  # Note that a regular user can't remove a system wide installation
  # because she will try to retrieve PYTHONDIR and INSTDIR from
  # the HKCU key root of registry
  RMDir /r $INSTDIR
  RMDir /r "$PYTHONDIR\Lib\site-packages\vitables"
  Delete "$PYTHONDIR\Scripts\vitables.exe"
  Delete "$PYTHONDIR\Scripts\vitables.exe.manifest"

  # Remove shortcuts from the Start Menu and desktop
  # Note that a regular user can't remove a system wide installation
  # because she  has no write permissions to the All Users folder
  Call un.RemoveShortcuts

  # Delete ViTables key and file associations from the registry
  Call un.CleanRegistry
SectionEnd

# Eventually the LANGUAGE macro must be inserted
!insertmacro MUI_LANGUAGE "English"

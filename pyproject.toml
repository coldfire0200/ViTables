[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ViTables"
dynamic = ["version"]
description = 'A viewer for HDF5 files.'
readme = "README.md"
requires-python = ">=3.10"
keywords = ["HDF5", "PyTables"]
authors = [
  { name = "Vicent Mas", email = "vmas@vitables.org" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: X11 Applications",
  "Environment :: MacOS X",
  "Environment :: Win32 (MS Windows)",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Operating System :: POSIX",
  "Programming Language :: Python",
  "Topic :: Scientific/Engineering"
]
dependencies = [
  "qtpy >=2.2",
  "tables >=3.0",
  "numpy >=2.0"
]

[project.optional-dependencies]
PyQt5 = ["PyQt5 >=5.5.1"]
PyQt6 = ["PyQt6 >=6.0"] 
PySide2 = ["PySide2 >=5.15.2"]
PySide6 = ["PySide6 >=6.4"]

[project.gui-scripts]
vitables = "vitables.start:gui"

[project.urls]
Documentation = "https://github.com/uvemas/ViTables#readme"
Issues = "https://github.com/uvemas/ViTables/issues"
Source = "https://github.com/uvemas/ViTables"
Home = "https://vitables.org"

[tool.hatch.version]
path = "vitables/__init__.py"

[tool.hatch.build]

[tool.hatch.build.targets.sdist]
include = [
  "*.txt",
  "pyproject.toml",
  "*.ts",
  "vitables.pro",
  "examples/**/*",
  "vitables/**/*",
]
artifacts = [
    "vitables/htmldocs/**/*"
]

[tool.hatch.build.targets.wheel]
include = [
  "vitables/**/*",
]
artifacts = [
    "vitables/htmldocs/**/*"
]

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "setuptools >= 72.1"
]
features = ["PyQt6"]

[tool.hatch.envs.pyqt5]
dependencies = [
  "coverage[toml]>=6.5",
  "setuptools >= 72.1"
]
features = ["PyQt5"]

[tool.hatch.envs.pyside2]
dependencies = [
  "coverage[toml]>=6.5",
  "setuptools >= 72.1"
]
features = ["PySide2"]

[tool.hatch.envs.pyside6]
dependencies = [
  "coverage[toml]>=6.5",
  "setuptools >= 72.1"
]
features = ["PySide6"]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/vitables tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]

ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Ignore bad-quotes-inline-string
  "Q000", 
  # Ignore PEP 8 recommendations about function names to follow snake_case
  "N802",
  # Ignore don't use bare except
  "E722"
]

unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["vitables"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["vitables", "tests"]
branch = true
parallel = true
omit = [
  "src/vitables/__about__.py",
]

[tool.coverage.paths]
vitables = ["src/vitables", "*/vitables/src/vitables"]
tests = ["tests", "*/vitables/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
